# 1초 256MB
# 7
# 15 11 4 8 5 2 4

# 1) 전투력 내림차순#check
# 2) n 2000 : O(n^2)

# - 동일안됨
#   + X_최대 최소값저장.
# - 열외방식
#   + 값이 '같거나 더 큰 거' 등장 : 자신보다 작은 그 이전 제거.
#     + 2-2)  극단적인 값이라 그럼에도 (위알고리즘과 다르게) 미리(/여러개) 빼는 게 나은 경우 없나. 15 2 1 14 13 12 (아주큰값은 내림차순이라 불가.)
# 15 [3 2 1] 14 [13 12 10] 13
# 유지할 max : 14만난순간 [1을제거 했을 때_max=3 ,321제거했을때_15 ]
#~ 뒤에 어떤 값이 몇개 있는지? 미리 sort한 거에서 set에서 제거 하며 있는지? len
#~ set - 1 O(1)
#   + m2 모든 요소 진행하며 나를 뺐을 경우 ((&)) 최대값 & 결과값 저장해나가기 ->sort?
#     + target.append([뺐을 경우_10000000,1], 안뺐을경우_[15_나,0_min이좋음] )# max값과 결과값 기준으로 선택해내가기
#     + max값이 최대인 경우에 나를 뺐을/안뺐을 경우의 이상적인값택하기? & 결과값이 최소인 경우만 저장해나가기?
#     + tar [나를뺐을경우_ [ 10000000_이전값,2_이전값+1]or[15_이전값, 1_이전값+1] ,[min(1000~,나),이전왼쪽값or []] ]
#   > 최대값 유지하며 가는 게 나음
# -> 남은 인원 최대화를 위해, 열외해야할 병사의 수_최소
# set
# 15 1 
# n명에서 작은 값부터 선택[시복 n20도아님] or for n검사하며 값크게 됐을 경우  구간 저장 -> 거기에서 선택
# 이진탐색
# 4) N 1,..
# - 2-2) 극단적인 값 케이스

# - 40m : 못 품

# - 정답코드[https://github.com/ndb796/python-for-coding-test/blob/master/16/4.py]
# - 추가 설명_약38분[https://www.youtube.com/watch?v=tWX6FZwwQMI&list=PLVsNizTWUw7H9_of5YCB0FmsSc-K44y81&index=30]
#   + 코드에서 변수에 최적 의미 정의한 건 작성자의 의미 설명 보는 게 빠름
n = int(input())
array = list(map(int, input().split()))
# 순서를 뒤집어 '최장 증가 부분 수열' 문제로 변환
array.reverse()

# 다이나믹 프로그래밍을 위한 1차원 DP 테이블 초기화
dp = [1] * n

# - 가장 긴 증가하는 부분 수열(LIS_Longest Increasing Subsequence) 알고리즘 수행
#   + [D[i]]=[array[i]를 마지막 원소로 가지는 부분 수열의 최대 길이]
#   + dp로 값만 이용해나가는 것이 아니라, 그 때의 최적을 저장해나감 
#   + DP 상황 정의하기 : 특정값을 '처음으로/마지막으로'가지는 케이스
#   + 점화식 : 모든 0<=j<i에 대하여, D[i]=max(D[j], D[j]+1) if array [j]<array[i]

for i in range(1, n): ## i_2 # - [dP_각 요소 마다, 이전값들 다 검사] 마침 [O(n^2)도 가능]하니까 이 방법도 생각해보기. dp가 꼭 n에서 n 외 뭔갈 하는 것만은 아님)
    for j in range(0, i): # i,j_1,0 ##2,0 2.1
        if array[j] < array[i]: # [0] < [1] ## [0],[1] < [2]
            dp[i] = max(dp[i], dp[j] + 1) # dp[1]_2= max(dp[1]_초기값1, dp[0]_1 +1 )
            ##dp[2]_2=max(dp[2]_1, dp[0]_1+1_2 ) # [0]
            ##dp[2]_3=max(dp[2]_2, dp[1]+1_3 )
            
# 열외해야 하는 병사의 최소 수를 출력
print(n - max(dp))
